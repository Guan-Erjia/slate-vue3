import {
  addMark,
  deleteFragment,
  Editor,
  getDirtyPaths,
  getFragment,
  insertBreak,
  insertFragment,
  insertNode,
  insertSoftBreak,
  insertText,
  normalizeNode,
  removeMark,
  shouldNormalize,
  type Descendant,
} from "./";
import { apply } from "./core";
import {
  above,
  after,
  before,
  deleteBackward,
  deleteForward,
  edges,
  elementReadOnly,
  end,
  first,
  fragment,
  getVoid,
  hasBlocks,
  hasInlines,
  hasPath,
  hasTexts,
  isBlock,
  isEdge,
  isEmpty,
  isEnd,
  isNormalizing,
  isStart,
  last,
  leaf,
  levels,
  marks,
  next,
  node,
  nodes,
  normalize,
  parent,
  path,
  pathRef,
  pathRefs,
  point,
  pointRef,
  pointRefs,
  positions,
  previous,
  range,
  rangeRef,
  rangeRefs,
  setNormalizing,
  shouldMergeNodesRemovePrevNode,
  start,
  string,
  unhangRange,
  withoutNormalizing,
} from "./editor";
import { deleteText } from "./transforms-text";
import {
  collapse,
  deselect,
  move,
  select,
  setPoint,
  setSelection,
} from "./transforms-selection";
import {
  insertNodes,
  liftNodes,
  mergeNodes,
  moveNodes,
  removeNodes,
  setNodes,
  splitNodes,
  unsetNodes,
  unwrapNodes,
  wrapNodes,
} from "./transforms-node";
import { ref } from "vue";

/**
 * Create a new Slate `Editor` object.
 */
export const createEditor = (children: Descendant[]): Editor => {
  const editor = ref<Editor>({
    children,
    operations: [],
    selection: null,
    marks: null,
    isElementReadOnly: () => false,
    isInline: () => false,
    isSelectable: () => true,
    isVoid: () => false,
    markableVoid: () => false,
    onChange: () => {},

    // Core
    apply: (...args) => apply(editor.value, ...args),

    // Editor
    addMark: (...args) => addMark(editor.value, ...args),
    deleteBackward: (...args) => deleteBackward(editor.value, ...args),
    deleteForward: (...args) => deleteForward(editor.value, ...args),
    deleteFragment: (...args) => deleteFragment(editor.value, ...args),
    getFragment: (...args) => getFragment(editor.value, ...args),
    insertBreak: (...args) => insertBreak(editor.value, ...args),
    insertSoftBreak: (...args) => insertSoftBreak(editor.value, ...args),
    insertFragment: (...args) => insertFragment(editor.value, ...args),
    insertNode: (...args) => insertNode(editor.value, ...args),
    insertText: (...args) => insertText(editor.value, ...args),
    normalizeNode: (...args) => normalizeNode(editor.value, ...args),
    removeMark: (...args) => removeMark(editor.value, ...args),
    getDirtyPaths: (...args) => getDirtyPaths(editor.value, ...args),
    shouldNormalize: (...args) => shouldNormalize(editor.value, ...args),

    // Editor interface
    above: (...args) => above(editor.value, ...args),
    after: (...args) => after(editor.value, ...args),
    before: (...args) => before(editor.value, ...args),
    collapse: (...args) => collapse(editor.value, ...args),
    delete: (...args) => deleteText(editor.value, ...args),
    deselect: (...args) => deselect(editor.value, ...args),
    edges: (...args) => edges(editor.value, ...args),
    elementReadOnly: (...args) => elementReadOnly(editor.value, ...args),
    end: (...args) => end(editor.value, ...args),
    first: (...args) => first(editor.value, ...args),
    fragment: (...args) => fragment(editor.value, ...args),
    getMarks: (...args) => marks(editor.value, ...args),
    hasBlocks: (...args) => hasBlocks(editor.value, ...args),
    hasInlines: (...args) => hasInlines(editor.value, ...args),
    hasPath: (...args) => hasPath(editor.value, ...args),
    hasTexts: (...args) => hasTexts(editor.value, ...args),
    insertNodes: (...args) => insertNodes(editor.value, ...args),
    isBlock: (...args) => isBlock(editor.value, ...args),
    isEdge: (...args) => isEdge(editor.value, ...args),
    isEmpty: (...args) => isEmpty(editor.value, ...args),
    isEnd: (...args) => isEnd(editor.value, ...args),
    isNormalizing: (...args) => isNormalizing(editor.value, ...args),
    isStart: (...args) => isStart(editor.value, ...args),
    last: (...args) => last(editor.value, ...args),
    leaf: (...args) => leaf(editor.value, ...args),
    levels: (...args) => levels(editor.value, ...args),
    liftNodes: (...args) => liftNodes(editor.value, ...args),
    mergeNodes: (...args) => mergeNodes(editor.value, ...args),
    move: (...args) => move(editor.value, ...args),
    moveNodes: (...args) => moveNodes(editor.value, ...args),
    next: (...args) => next(editor.value, ...args),
    node: (...args) => node(editor.value, ...args),
    nodes: (...args) => nodes(editor.value, ...args),
    normalize: (...args) => normalize(editor.value, ...args),
    parent: (...args) => parent(editor.value, ...args),
    path: (...args) => path(editor.value, ...args),
    pathRef: (...args) => pathRef(editor.value, ...args),
    pathRefs: (...args) => pathRefs(editor.value, ...args),
    point: (...args) => point(editor.value, ...args),
    pointRef: (...args) => pointRef(editor.value, ...args),
    pointRefs: (...args) => pointRefs(editor.value, ...args),
    positions: (...args) => positions(editor.value, ...args),
    previous: (...args) => previous(editor.value, ...args),
    range: (...args) => range(editor.value, ...args),
    rangeRef: (...args) => rangeRef(editor.value, ...args),
    rangeRefs: (...args) => rangeRefs(editor.value, ...args),
    removeNodes: (...args) => removeNodes(editor.value, ...args),
    select: (...args) => select(editor.value, ...args),
    setNodes: (...args) => setNodes(editor.value, ...args),
    setNormalizing: (...args) => setNormalizing(editor.value, ...args),
    setPoint: (...args) => setPoint(editor.value, ...args),
    setSelection: (...args) => setSelection(editor.value, ...args),
    splitNodes: (...args) => splitNodes(editor.value, ...args),
    start: (...args) => start(editor.value, ...args),
    string: (...args) => string(editor.value, ...args),
    unhangRange: (...args) => unhangRange(editor.value, ...args),
    unsetNodes: (...args) => unsetNodes(editor.value, ...args),
    unwrapNodes: (...args) => unwrapNodes(editor.value, ...args),
    void: (...args) => getVoid(editor.value, ...args),
    withoutNormalizing: (...args) => withoutNormalizing(editor.value, ...args),
    wrapNodes: (...args) => wrapNodes(editor.value, ...args),
    shouldMergeNodesRemovePrevNode: (...args) =>
      shouldMergeNodesRemovePrevNode(editor.value, ...args),
  });

  return editor.value;
};
