import{_ as t}from"./Markdown.vue_vue_type_style_index_0_lang-CmA0k_Xw.js";import{d as n,f as i,e as o,o as e}from"./index-C_5Oh6uc.js";import"./editable-CteuoeWb.js";import"./use-inherit-ref-lmEEbD6_.js";import"./prism-markdown-DWcXTy1f.js";import"./normalize-tokens-eYXBy0v-.js";const r="Provides the same interface as the [**`slate-history`**](https://docs.slatejs.org/libraries/slate-history) library\n\n## withHistory\n\nThe `withHistory` plugin adds the `HistoryEditor` to an `Editor` instance and keeps track of the operation history of a Slate editor as operations are applied to it, using undo and redo stacks.\n\n```typescript\nwithHistory<T extends Editor>(editor: T): T & HistoryEditor\n```\n\nAdd `HistoryEditor` interface to an instance of any `Editor`.\n\nWhen used with `withDOM`, `withHistory` should be applied inside. For example:\n\n```typescript\nconst editor = withDOM(withHistory(createEditor()));\n```\n\n## History Editor\n\nThe `HistoryEditor` interface is added to the `Editor` when it is instantiated using the `withHistory` method.\n\n```typescript\nconst editor = withDOM(withHistory(createEditor()));\n```\n\nThis adds properties to `editor` that enables undo and redo in Slate.\n\nThere are also static methods for working with the Editor's undo/redo history.\n\n```typescript\nexport interface HistoryEditor extends BaseEditor {\n  history: History;\n  undo: () => void;\n  redo: () => void;\n  writeHistory: (stack: \"undos\" | \"redos\", batch: any) => void;\n}\n```\n\n## Static methods\n\n#### Undo and Redo\n\n```typescript\nHistoryEditor.redo(editor: HistoryEditor): void\n```\n\nRedo to the next saved state.\n\n```typescript\nHistoryEditor.undo(editor: HistoryEditor): void\n```\n\nUndo to the previous saved state.\n\n### Merging and Saving\n\n```typescript\nHistoryEditor.withMerging(editor: HistoryEditor, fn: () => void): void\n```\n\nApply a series of changes inside a synchronous `fn`, These operations will\nbe merged into the previous history.\n\n```typescript\nHistoryEditor.withNewBatch(editor: HistoryEditor, fn: () => void): void\n```\n\nApply a series of changes inside a synchronous **fn**, ensuring that the first\noperation starts a new batch in the history. Subsequent operations will be\nmerged as usual.\n\n```typescript\nHistoryEditor.withoutMerging(editor: HistoryEditor, fn: () => void): void\n```\n\nApply a series of changes inside a synchronous **fn**, without merging any of\nthe new operations into previous save point in the history.\n\n```typescript\nHistoryEditor.withoutSaving(editor: HistoryEditor, fn: () => void): void\n```\n\nApply a series of changes inside a synchronous **fn**, without saving any of\ntheir operations into the history.\n\n### Check methods\n\n```typescript\nHistoryEditor.isHistoryEditor(value: any): value is HistoryEditor\n```\n\nCheck if a value is a `HistoryEditor` (i.e. it has the `HistoryEditor` interface).\n\n```typescript\nHistoryEditor.isMerging(editor: HistoryEditor): boolean | undefined\n```\n\nGet the merge flag's current value.\n\n```typescript\nHistoryEditor.isSaving(editor: HistoryEditor): boolean | undefined\n```\n\nGet the saving flag's current value.\n\n## Instance methods\n\n```typescript\nundo(): void\n```\n\nUndo the last batch of operations\n\n```typescript\nredo(): void\n```\n\nRedo the last undone batch of operations\n\n```typescript\nwriteHistory(stack: 'undos'| 'redos', batch: any) => void\n```\n\nPush a batch of operations as either `undos` or `redos` onto `editor.undos` or `editor.redos`\n\n## History\n\nThe `History` object contains the undo and redo history for the editor.\n\nIt can be accessed from an `Editor` instance as the property `history`.\n\nThis property is only available on the `Editor` if the editor was instantiated using the `withHistory` method which adds undo/redo functionality to the Slate editor.\n\n```typescript\nexport interface History {\n  redos: Batch[];\n  undos: Batch[];\n}\n\ninterface Batch {\n  operations: Operation[];\n  selectionBefore: Range | null;\n}\n```\n\n## Static Methods\n\n```typescript\nHistory.isHistory(value: any): value is History\n```\nReturns true if the passed in value is a History object and also acts as a type guard for `History`.\n",f=n({__name:"history",setup(s){return(a,d)=>(e(),i(t,{content:o(r)},null,8,["content"]))}});export{f as default};
